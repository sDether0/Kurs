@page "/counter"

@using KursModels.Requests
@using KursModels.Respones
@using Newtonsoft.Json.Linq
@using Newtonsoft.Json
@using System.Text
@using System.Diagnostics

<h1>Counter</h1>
<p contenteditable="true">@currentCount</p>
<EditForm Model=login>
    <p>Email</p>
    <InputText @bind-Value=@login.Email></InputText>
    <p>Password</p>
    <InputText @bind-Value=@login.Password></InputText>
    <button type="submit" @onclick=Login />
</EditForm>

<p contenteditable="true">@tokens.Token</p>
<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private string currentCount = "Current count: 0";
    private UserLoginRequest login = new UserLoginRequest();
    private TokenRequest tokens = new TokenRequest();
    private Uri url = new Uri("https://46.147.101.168:15577");
    HttpClient client = new HttpClient();

    public Counter()
    {
        tokens.Token = "";
        client.BaseAddress = url;
    }

    private async Task Login()
    {
        var content = new StringContent(JObject.FromObject(login).ToString(), Encoding.UTF8, "application/json");
        HttpResponseMessage result = null;
        try
        {
            result = await client.PostAsync("/Login", content);
            var response = JObject.Parse(await result.Content.ReadAsStringAsync()).ToObject<RegistrationResponse>();
            tokens.Token = response.Token;
            tokens.RefreshToken = response.RefreshToken;
            client.DefaultRequestHeaders.Add("Authorization", "Bearer " + tokens.Token);
        }
        catch (Exception ex)
        {

            tokens.Token = result != null ? await result.Content.ReadAsStringAsync() : ex.Message;
        }

        StateHasChanged();
    }

    private async Task IncrementCount()
    {
        HttpResponseMessage result = null;
        try
        {
            if (!client.DefaultRequestHeaders.Any(x => x.Key == "Authorization"))
                client.DefaultRequestHeaders.Add("Authorization", "Bearer " + tokens.Token);
            result = await client.GetAsync("/api/User/users");
            if (result.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                var newtoken = JObject.Parse(await (await client.PostAsync("/RefreshToken", new StringContent(JObject.FromObject(tokens).ToString(), Encoding.UTF8, "application/json"))).Content.ReadAsStringAsync()).ToObject<AuthResult>();
                tokens.Token = newtoken.Token;
                tokens.RefreshToken = newtoken.RefreshToken;
                client.DefaultRequestHeaders.Add("Authorization", "Bearer " + tokens.Token);
            }
            currentCount = "";
            StateHasChanged();
            currentCount = await result.Content.ReadAsStringAsync() + " " + result.StatusCode;

        }
        catch (Exception ex)
        {
            tokens.Token = result != null ? await result.Content.ReadAsStringAsync() : ex.Message;
        }
        StateHasChanged();
    }
}
